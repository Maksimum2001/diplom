<Page x:Class="Diplom.Страницы_учебных_материалов.Str6"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:Diplom.Страницы_учебных_материалов"
      mc:Ignorable="d" 
      d:DesignHeight="5000" d:DesignWidth="1000" MaxHeight="5000" MinWidth="900" MinHeight="700"
      Title="Str6">

    <ScrollViewer>
        <StackPanel Background="DodgerBlue">
            <Label>ОТЛАДКА ПП. ИНСТРУМЕНТЫ ОТЛАДКИ</Label>
            <Label>Основные понятия</Label>
            <TextBlock Text="       Отладка ПС - это деятельность, направленная на обнаружение и исправление ошибок в ПС с использованием процессов выполнения его программ. "></TextBlock>
            <TextBlock Text="       Тестирование ПС - это процесс выполнения его программ на некотором наборе данных, для которого заранее известен результат применения или известны правила поведения этих программ. Указанный набор данных называется тестовым или просто тестом. "></TextBlock>
            <TextBlock Text="       Трудоемкость отладки часто превышает суммарную трудоемкость разработки алгоритма, программирования (кодирования) и тестирования. Затраты времени на отладку составляют от 50 до 80% общего времени разработки программы."></TextBlock>
            <TextBlock Text="       В зарубежной литературе отладку часто понимают только как процесс поиска и исправления ошибок (без тестирования), факт наличия которых устанавливается при тестировании. Иногда тестирование и отладку считают синонимами. "></TextBlock>
            <TextBlock Text="       В нашей стране в понятие отладки обычно включают и тестирование, поэтому мы будем следовать сложившейся традиции."></TextBlock>
            <TextBlock Text="       Наиболее эффективный метод отладки – это групповой метод отыскания ошибок, когда два программиста сначала независимо, а затем совместно осуществляют этот процесс."></TextBlock>
            <TextBlock Text="       Повышения эффективности отладки можно добиться путем попеременного внимательного анализа программы за столом и машинного тестирования."></TextBlock>
            <TextBlock Text="       Совместное рассмотрение в данной лекции этих процессов делает указанное разночтение не столь существенным. Следует отметить, что тестирование используется и как часть процесса аттестации ПС."></TextBlock>
            <Label>Методы отладки программ</Label>
            <TextBlock Text="       Для отслеживания и контроля состояний вычислительного процесса при их отладке применяют:"></TextBlock>
            <ListBox Margin="30,5,0,0">
                <ListBoxItem>• ручную(desk checking);</ListBoxItem>
                <ListBoxItem>• пошаговую(single-step operation);</ListBoxItem>
                <ListBoxItem>• отладку программ по предварительно заданным точкам останова(breakpoints – меткам операторов) и др.</ListBoxItem>
            </ListBox>
            <Label>Средства обнаружения и локализации ошибок</Label>
            <TextBlock Text="       • Листинг исходного кода"></TextBlock>
            <TextBlock Text="       • Подробная спецификация программы"></TextBlock>
            <TextBlock Text="       • Детальный алгоритм программы, представленный в виде блок-схемы, схемы действий, таблицы-решений и т.д."></TextBlock>
            <TextBlock Text="       • Выходной листинг"></TextBlock>
            <TextBlock Text="       • Анализ последовательности выполнения операторов и оценка ожидаемых значений переменных"></TextBlock>
            <TextBlock Text="       • Отслеживание обращений к программам"></TextBlock>
            <TextBlock Text="       • Дампы памяти (представление в какой-либо момент некоторой части содержимого оперативной памяти вычислительной системы в удобочитаемой форме)."></TextBlock>
            <TextBlock>Эти средства предполагают проведение внимательного анализа программы за столом</TextBlock>
            <Label>Заповеди отладки</Label>
            <TextBlock Padding="30,0" Text="Заповедь 1."></TextBlock>
            <TextBlock Text="   Считайте тестирование ключевой задачей разработки ПС, поручайте его самым квалифицированным и одаренным программистам; нежелательно тестировать свою собственную программу. "></TextBlock>
            <TextBlock Padding="30,0" Text="Заповедь 2."></TextBlock>
            <TextBlock Text="   Хорош тот тест, для которого высока вероятность обнаружить ошибку, а не тот, который демонстрирует правильную работу программы. "></TextBlock>
            <TextBlock Padding="30,0" Text="Заповедь 3."></TextBlock>
            <TextBlock Text="   Готовьте тесты как для правильных, так и для неправильных данных. "></TextBlock>
            <TextBlock Padding="30,0" Text="Заповедь 4."></TextBlock>
            <TextBlock Text="   Избегайте невоспроизводимых тестов, документируйте их пропуск через компьютер; детально изучайте результаты каждого теста. "></TextBlock>
            <TextBlock Padding="30,0" Text="Заповедь 5."></TextBlock>
            <TextBlock Text="   Каждый модуль подключайте к программе только один раз; никогда не изменяйте программу, чтобы облегчить ее тестирование. "></TextBlock>
            <TextBlock Padding="30,0" Text="Заповедь 6."></TextBlock>
            <TextBlock Text="   Пропускайте заново все тесты, связанные с проверкой работы какой-либо программы ПС или ее взаимодействия с другими программами, если в нее были внесены изменения (например, в результате устранения ошибки). "></TextBlock>
            <Label>Инструменты отладки</Label>
            <TextBlock Text="       Разработаны специальные программные средства (инструменты) для проведения отладки программ, среди которых наиболее популярны так называемые отладчики. Они имеют удобный пользовательский интерфейс, позволяют проводить отладку программ пошагово и с предварительно заданными (заказанными) точками останова, просматривать и изменять состояние выделенной области памяти, контролировать различную информацию на этапе выполнения. Отладчики часто интегрированы в систему разработки кода программ (например Eclipse CDT, MS Visual Studio)."></TextBlock>
            <TextBlock Text="       Широко используются инструменты динамического и статического анализа. Динамические анализаторы (Valgrind) контролируют время выполнения участков кода программы, находят точки (области) некорректной работы с памятью и объектами операционной системы и др. "></TextBlock>
            <TextBlock Text="       Статические анализаторы (например Klocwork) вы-являют ошибки выхода (обращения) за границы масси-вов, потенциальные проблемы безопасности, т. н. утечки памяти, некорректность использования системных ресурсов и др."></TextBlock>
            <TextBlock Text="       Популярны также сканеры интерфейсов (напр: Wire-shark, позволяющий осуществлять сетевой мониторинг). Однако для анализа типичных ошибок параллельных или многопоточных приложений, напр: такие как гонки данных, тупиков (взаимной блокировки процессов), потоков в состоянии ожидания, потерянных сигналов, требуются специализированные средства отладки параллельных приложений (напр: Intel Thread Checker). "></TextBlock>
            <TextBlock Margin="0,0,0,50" Text="       Следует отметить, что наиболее эффективно ком-плексное применение инструментов О. п., поскольку кон-кретные программные средства обеспечивают поиск лишь определённых типов ошибок."></TextBlock>
        </StackPanel>
    </ScrollViewer>
</Page>
