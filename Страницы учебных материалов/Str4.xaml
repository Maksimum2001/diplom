<Page x:Class="Diplom.Страницы_учебных_материалов.Str4"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:Diplom.Страницы_учебных_материалов"
      mc:Ignorable="d" 
      d:DesignHeight="3500" d:DesignWidth="1000" MaxHeight="3500" MaxWidth="1400" MinWidth="900"
      Title="Str4">

    <ScrollViewer>
        <StackPanel Background="DodgerBlue">
            <Label>ТРАНСПОРТНЫЕ ПРОТОКОЛЫ</Label>
            <Label Margin="0,0,0,15">Транспортный уровень</Label>
            <TextBlock Text="       Транспортный уровень (Transport Layer) – обеспечивает приложениям или верхним уровням стека – прикладному, представления и сеансовому – передачу данных с той степенью надежности, которая им требуется. Модель OSI определяет пять классов транспортного сервиса от низшего класса 0 до высшего класса 4. Эти виды сервиса отличаются качеством предоставляемых услуг: срочностью, возможностью восстановления прерванной связи, наличием средств мультиплексирования нескольких соединений между различными прикладными протоколами через общий транспортный протокол, а главное – способностью к обнаружению и исправлению ошибок передачи, таких как искажение, потеря и дублирование пакетов. "></TextBlock>
            <TextBlock Text="       Выбор класса сервиса транспортного уровня определяется, с одной стороны, тем, в какой степени задача обеспечения надежности решается самими приложениями и протоколами более высоких, чем транспортный, уровней. С другой стороны, этот выбор зависит от того, насколько надежной является система транспортировки данных в сети, обеспечиваемая уровнями, расположенными ниже транспортного, - сетевым, канальным и физическим. "></TextBlock>
            <Label>Функции транспортного уровня</Label>
            <ListBox Name="List">
                <ListBoxItem Padding="20,0,0,0">• преобразование транспортного адреса в сетевой;</ListBoxItem>
                <ListBoxItem Padding="20,0,0,0">• межоконечное мультиплексирование транспортных соединений в сетевые;</ListBoxItem>
                <ListBoxItem Padding="20,0,0,0">• установление и разрыв транспортных соединений;</ListBoxItem>
                <ListBoxItem Padding="20,0,0,0">• межоконечное упорядочение блоков данных по отдельным соединениям;</ListBoxItem>
                <ListBoxItem Padding="20,0,0,0">• межоконечное обнаружение ошибок и необходимый контроль качества услуг;</ListBoxItem>
                <ListBoxItem Padding="20,0,0,0">• межоконечное восстановление после ошибок;</ListBoxItem>
                <ListBoxItem Padding="20,0,0,0">• межоконечное сегментирование, объединение и сцепление;</ListBoxItem>
                <ListBoxItem Padding="20,0,0,0">• межоконечное управление потом данных по отдельным соединениям;</ListBoxItem>
                <ListBoxItem Padding="20,0,0,0">• супервизорные функции;</ListBoxItem>
                <ListBoxItem Padding="20,0,0,0">• передача срочных транспортных сервисных блоков данных.</ListBoxItem>
            </ListBox>
            <TextBlock Margin="0,10" Padding="30,0,0,0" FontStyle="Oblique" Text="Транспортный уровень стека TCP/IP может предоставлять вышележащему уровню два типа сервиса:"></TextBlock>
            <TextBlock Text="       1) гарантированную доставку обеспечивает протокол управления передачей (Transmission Control Protocol, TCP);"></TextBlock>
            <TextBlock Text="       2) доставку по возможности, или с максимальными усилиями, обеспечивает протокол пользовательских дейтаграмм (User Datagram Protocol, UDP)."></TextBlock>
            <Label>Мультиплексирование и демультиплексирование</Label>
            <TextBlock Text="       Каждый компьютер может выполнять несколько процессов, более того, прикладной процесс тоже может иметь несколько точек входа, выступающих в качестве адреса назначения для пакетов данных. Поэтому после того, как пакет средствами протокола IP доставлен на сетевой интерфейс компьютера-получателя, данные необходимо переправить конкретному процессу получателю."></TextBlock>
            <TextBlock Text="       Существует и обратная задача: пакеты, которые отправляют в сеть разные приложения, работающие на одном конечном узле, обрабатываются общим для них протоколом IP. Следовательно, в стеке должно быть предусмотрено средство «сбора» пакетов от разных приложений для передачи протоколу IP. Эту работу выполняют протоколы TCP и UDP."></TextBlock>
            <TextBlock Text="       Процедура приема данных протоколами TCP и UDP, поступающих от нескольких различных прикладных служб, называется Мультиплексированием."/>
            <TextBlock Text="       Обратная процедура – процедура распределения протоколами TCP и UDP поступающих от сетевого уровня пакетов между набором высокоуровневых служб – называется Демультиплексированием."></TextBlock>
            <Grid Width="500" Height="350" Background="White">
                <Image Source="/Diplom;component/Resources/4_1.png" ></Image>
            </Grid>
            <TextBlock Margin="0,15,0,5" Padding="20,0,0,0" Text="Протоколы TCP и UDP ведут для каждого приложения две очереди: "></TextBlock>
            <TextBlock Padding="30,0,0,0">• очередь пакетов, поступающих к данному приложению из сети;</TextBlock>
            <TextBlock Padding="30,0,0,0">•	очередь пакетов, отправляемых данным приложением в сеть.</TextBlock>
            <TextBlock Text="       Пакеты, поступающие на транспортный уровень, организуются операционной системой в виде множества очередей к точкам входа различных прикладных процессов. В терминологии TCP/IP такие системные очереди называются портами, причем входная и выходная очереди одного приложения рассматриваются как один порт. Для однозначной идентификации портов им присваивают номера. Номера портов используются для адресации приложений."></TextBlock>
            <Label>Протокол UDP</Label>
            <TextBlock Text="       Протокол UDP, являясь дейтаграммным протоколом, реализует сервис по возможности, то есть не гарантирует доставку своих сообщений, а, следовательно, никоим образом не компенсирует ненадежность дейтаграммного протокола IP. Единица данных протокола UDP называется UDP-пакетом или пользовательской дейтаграммой (user datagram)."></TextBlock>
            <TextBlock Text="       Каждая дейтаграмма переносит отдельное пользовательское сообщение. Это приводит к естественному ограничению: длина дейтаграммы UDP не может превышать длины поля данных протокола IP, которое, в свою очередь, ограничено размером кадра технологии нижнего уровня. "></TextBlock>
            <TextBlock Text="       Поэтому если UDP-буфер переполняется, то данные приложения отбрасываются. Заголовок UDP-пакета, состоящий из четырех 2-байтовых полей, содержит поля порт источника, порт получателя, длина UDP и контрольная сумма."></TextBlock>
            <Label>Протокол TCP</Label>
            <TextBlock Text="       Протокол TCP (Transmission Control Protocol) обеспечивает надежную транспортировку данных между прикладными процессами путем установления логического соединения."></TextBlock>
            <TextBlock>Установление соединения происходит в три шага:</TextBlock>
            <TextBlock Text="       1.	Клиент, запрашивающий соединение, отправляет серверу пакет, указывающий номер порта, который клиент желает использовать, а также код (определенное число) ISN (Initial Sequence number)."></TextBlock>
            <TextBlock Text="       2.	Сервер отвечает пакетом, содержащий ISN сервера, а также ISN клиента, увеличенный на 1."></TextBlock>
            <TextBlock Text="       3.	Клиент должен подтвердить установление соединения, вернув ISN сервера, увеличенный на 1."></TextBlock>
            <TextBlock Text="       Трехступенчатое открытие соединения устанавливает номер порта, а также ISN клиента и сервера. Каждый, отправляемый TCP – пакет содержит номера TCP – портов отправителя и получателя, номер фрагмента для сообщений, разбитых на меньшие части, а также контрольную сумму, позволяющую убедиться, что при передаче не произошло ошибок."></TextBlock>
            <TextBlock Text="       Информация, поступающая к протоколу TCP от протоколов более высокого уровня, рассматривается протоколом TCP как неструктурированный поток байтов. Поступающие данные буферизируются средствами TCP. "></TextBlock>
            <TextBlock Text="       Для передачи на сетевой уровень из буфера «вырезается» некоторая непрерывная часть данных, которая называется сегментом. Сегмент состоит из фиксированного 20-байтного заголовка (плюс необязательная часть), за которой могут следовать байты данных. Размер сегментов определяется программным обеспечением TCP. Оно может объединять в один сегмент данные, полученные в результате нескольких операций записи, или, наоборот, распределять результата одной записи между несколькими сегментами. "></TextBlock>
            <Label>Сессии TCP</Label>
            <TextBlock Text="       Основным отличием TCP от UDP является то, что на протокол TCP возложена дополнительная задача – обеспечить надежную доставку сообщений, используя в качестве основы ненадежный дейтаграммный протокол IP."></TextBlock>
            <TextBlock Text="       Установленные на конечных узлах протокольные модули TCP решают задачу обеспечения надежного обмена данными путем установления между собой логических соединений. Благодаря логическому соединению TCP следит, чтобы передаваемые сегменты не были потеряны, не были продублированы и пришли к получателю в том порядке, в котором были отправлены."></TextBlock>
            <TextBlock Text="       При установлении логического соединения модули TCP договариваются между собой о параметрах процедуры обмена данными. В протоколе TCP каждая сторона соединения посылает противоположной стороне следующие параметры:"></TextBlock>
            <TextBlock Text="       •	максимальный размер сегмента, который она готова принять;"></TextBlock>
            <TextBlock Text="       •	максимальный объем данных (возможно несколько сегментов), которые она разрешает другой стороне передавать в свою сторону. Даже если та еще не получила квитанцию на предыдущую порцию данных (размер окна);"></TextBlock>
            <TextBlock Text="       •	начальный порядковый номер байта, с которого она начинает отсчет потока данных в рамках данного соединения."></TextBlock>
            <TextBlock Text="       Чтобы установить соединение, одна сторона (например, сервер) пассивно ожидает входящего соединения, выполняя примитивы LISTEN (объявление о желании принять соединение) и ACCEPT (блокирование звонящего до получения попытки соединения), либо указывая конкретный источник, либо не указывая его."></TextBlock>
            <TextBlock Text="       Другая сторона (например, клиент) выполняет примитив CONNECT (активно пытаться установить соединение), указывая IP-адрес и порт, с которым он хочет установить соединение, максимальный размер TCP-сегмента и, по желанию, некоторые данные пользователя (например, пароль) Примитив CONNECT посылает TCP-сегмент с установленным битом SYN и сброшенным битом ACK и ждет ответа."></TextBlock>
            <Grid Width="800" Height="500" Background="White">
                <Image Source="/Diplom;component/Resources/4_2.png" Margin="0" Width="800" Height="500"></Image>
            </Grid>
        </StackPanel>
    </ScrollViewer>
</Page>
