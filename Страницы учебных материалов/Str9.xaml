<Page x:Class="Diplom.Страницы_учебных_материалов.Str9"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:Diplom.Страницы_учебных_материалов"
      mc:Ignorable="d" 
      d:DesignHeight="5000" d:DesignWidth="1000" MaxHeight="5000" MinWidth="900" MinHeight="700"
      Title="Str9">

    <ScrollViewer>
        <StackPanel Background="DodgerBlue">
            <Label>ОБРАБОТКА ИСКЛЮЧИТЕЛЬНЫХ СИТУАЦИЙ</Label>
            <Label>Конструкция try..catch..finally</Label>
            <TextBlock Text="       Иногда при выполнении программы возникают ошибки, которые трудно предусмотреть или предвидеть, а иногда и вовсе невозможно. "></TextBlock>
            <TextBlock Text="       Например, при передачи файла по сети может неожиданно оборваться сетевое подключение. Такие ситуации называются исключениями. Язык C# предоставляет разработчикам возможности для обработки таких ситуаций. Для этого в C# предназначена конструкция «try...catch...finally»."></TextBlock>
            <Image Source="/Diplom;component/Resources/9_1.png" Height="200" Width="560"></Image>
            <TextBlock Text="       При использовании блока try...catch..finally вначале выполняются все инструкции в блоке try. Если в этом блоке не возникло исключений, то после его выполнения начинает выполняться блок finally. И затем конструкция try..catch..finally завершает свою работу."></TextBlock>
            <TextBlock Text="       Если же в блоке try вдруг возникает исключение, то обычный порядок выполнения останавливается, и среда CLR начинает искать блок catch, который может обработать данное исключение. Если нужный блок catch найден, то он выполняется, и после его завершения выполняется блок finally."></TextBlock>
            <TextBlock Text="       Если нужный блок catch не найден, то при возникновении исключения программа аварийно завершает свое выполнение."></TextBlock>
            <Image Source="/Diplom;component/Resources/9_2.png" Height="114" Width="560"></Image>
            <TextBlock Text="       В данном случае происходит деление числа на 0, что приведет к генерации исключения. И при запуске приложения в режиме отладки мы увидим в Visual Studio окошко, которое информирует об исключении:"></TextBlock>
            <Image Source="/Diplom;component/Resources/9_3.png" Height="221" Width="560"></Image>
            <TextBlock Text="       В этом окошке мы видим, что возникло исключение, которое представляет тип System.DivideByZeroException, то есть попытка деления на ноль. С помощью пункта View Details можно посмотреть более детальную информацию об исключении."></TextBlock>
            <TextBlock Text="       И в этом случае единственное, что нам остается, это завершить выполнение программы. Чтобы избежать подобного аварийного завершения программы, следует использовать для обработки исключений конструкцию try...catch...finally. Так, перепишем пример следующим образом:"></TextBlock>
            <Image Source="/Diplom;component/Resources/9_4.png" Height="239" Width="552" ></Image>
            <TextBlock Text="       В данном случае у нас опять же возникнет исключение в блоке try, так как мы пытаемся разделить на ноль. И дойдя до строки int y = x / 0;  выполнение программы остановится. CLR найдет блок catch и передаст управление этому блоку. После блока catch будет выполняться блок finally."></TextBlock>
            <TextBlock Text="       Таким образом, программа по-прежнему не будет выполнять деление на ноль и соответственно не будет выводить результат этого деления, но теперь она не будет аварийно завершаться, а исключение будет обрабатываться в блоке catch."></TextBlock>
            <TextBlock Text="Следует отметить, что в этой конструкции обязателен блок try. При наличии блока catch мы можем опустить блок finally:"></TextBlock>
            <Image Source="/Diplom;component/Resources/9_5.png" Height="155" Width="550" ></Image>
            <TextBlock Text="И, наоборот, при наличии блока finally мы можем опустить блок catch и не обрабатывать исключение:"></TextBlock>
            <Image Source="/Diplom;component/Resources/9_6.png" Height="170" Width="550"></Image>
            <TextBlock Text="       Однако, хотя с точки зрения синтаксиса C# такая конструкция вполне корректна, тем не менее, поскольку CLR не сможет найти нужный блок catch, то исключение не будет обработано, и программа аварийно завершится."></TextBlock>
            <Label>Обработка исключений и условные конструкции</Label>
            <TextBlock Text="       Ряд исключительных ситуаций может быть предвиден разработчиком. Например, пусть в программе есть метод, который принимает строку, конвертирует ее в число и вычисляет квадрат этого числа:"></TextBlock>
            <Image Source="/Diplom;component/Resources/9_7.png" Height="128" Width="550"></Image>
            <TextBlock Text="       Если пользователь передаст в метод не число, а строку, которая содежит нецифровые символы, то программа выпадет в ошибку. С одной стороны, здесь как раз та ситуация, когда можно применить блок try..catch, чтобы обработать возможную ошибку. Однако гораздо оптимальнее было бы проверить допустимость преобразования:"></TextBlock>
            <Image Source="/Diplom;component/Resources/9_8.png" Height="212" Width="538"></Image>
            <TextBlock Text="       Метод int.TryParse() возвращает true, если преобразование можно осуществить, и false - если нельзя. При допустимости преобразования переменная x будет содержать введенное число. Так, не используя try...catch можно обработать возможную исключительную ситуацию."></TextBlock>
            <TextBlock Margin="0,0,0,50" Text="       С точки зрения производительности использование блоков try..catch более накладно, чем применение условных конструкций. Поэтому по возможности вместо try..catch лучше использовать условные конструкции на проверку исключительных ситуаций."></TextBlock>
        </StackPanel>
    </ScrollViewer>
</Page>
