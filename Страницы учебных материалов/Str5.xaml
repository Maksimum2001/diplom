<Page x:Class="Diplom.Страницы_учебных_материалов.Str5"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:Diplom.Страницы_учебных_материалов"
      mc:Ignorable="d" 
      d:DesignHeight="5000" d:DesignWidth="1000" MaxHeight="5000" MaxWidth="1400" MinWidth="900"
      Title="Str5">

    <ScrollViewer>
        <StackPanel Background="DodgerBlue">
            <Label>ОРГАНИЗАЦИЯ РАБОТЫ КОМАНДЫ В СИСТЕМЕ КОНТРОЛЯ ВЕРСИЙ</Label>
            <TextBlock Text="       Системы контроля версий (их ещё называют системами управления версиями) –  один из инструментов, который использует в своей работе любой программист от первокурсника до опытного тим-лида с сотнями успешных проектов. Ссылки на примеры кода в репозиториях помещают в своё портфолио. Большие проекты с открытым программным кодом получают тысячи улучшений, благодаря размещению на специализированном хостинге. От 30 до 70% кода, использованного в программном продукте, профессиональные разработчики могут скопировать с проектов, представленных в открытых репозиториях."></TextBlock>
            <TextBlock Text="       Незаменимы системы контроля версий в командной разработке, где синхронизация процесса играет важную роль. Но даже если Вы принципиально не работаете в команде, система контроля версий может помочь Вам справиться со многими сложными ситуациями." TextAlignment="Justify"/>
            <TextBlock Text="       С необходимостью отката программы к предыдущей версии рано или поздно сталкивается любой программист."></TextBlock>
            <TextBlock FontStyle="Oblique" Text="В точке А программа отлично работает, а попытка расширить функционал, ввести дополнительные переменные, классы и прочее приводит к появлению ошибки."></TextBlock>
            <TextBlock Text="       Распознать ошибку удаётся не всегда. Поэтому многие программисты предпочитают «пройти перезагрузку» — откатиться к стабильной рабочей версии и переписать дополнения заново, построчно анализируя весь добавленный код."></TextBlock>
            <TextBlock Text="       Реализовать такую процедуру помогает использование системы контроля версий (СКВ), которое позволяет четко отследить историю разработки, найти стабильную версию и продолжить работу."></TextBlock>
            <TextBlock Text="       В системе контроля версий может содержаться, как программный код, так и любая другая информация (включая текстовые файлы, изображения и т.п.)"></TextBlock>
            <Label>Примитивная модель хранения версий</Label>
            <TextBlock Text="       В примитивной модели актуальные копии проекта перезаписываются в отдельную директорию через определённый промежуток времени."></TextBlock>
            <TextBlock FontStyle="Oblique" FontWeight="Bold" Padding="20,0,0,0">Достоинства:</TextBlock>
            <TextBlock Padding="10,5">- возможность восстановления данных одной из записанных версий.</TextBlock>
            <TextBlock FontStyle="Oblique" FontWeight="Bold" Padding="20,0,0,0">Недостатки:</TextBlock>
            <TextBlock Padding="10,0">- сложности с поиском необходимой версии в обширной и плохо структурированной базе данных;</TextBlock>
            <TextBlock Padding="10,0">- возможность потери данных вследствие возникновения физических поломок оборудования;</TextBlock>
            <TextBlock Padding="10,0">- отсутствие возможности совместной разработки.</TextBlock>
            <Label>Локальные системы контроля версий</Label>
            <TextBlock Text="       Локальные  СКВ обычно хранят на компьютере список изменений, внесенных в файлы. Основываясь на этих данных, система контроля версий воссоздает нужную версию файла (актуальную на определенный момент времени)."></TextBlock>
            <Image Source="/Diplom;component/Resources/5_1.jpg" Height="376" Width="500"/>
            <TextBlock FontStyle="Oblique" FontWeight="Bold" Padding="20,5">Достоинства:</TextBlock>
            <TextBlock Padding="10,0">- возможность восстановления данных  из определенной версии (точно определяется по времени записи);</TextBlock>
            <TextBlock Padding="10,0">- высокая скорость выполнения восстановления (база данных четко структурирована, поэтому сложностей при поиске не возникает, сетевая задержка отсутствует, поскольку данные хранятся непосредственно на рабочем компьютере).</TextBlock>
            <TextBlock FontStyle="Oblique" FontWeight="Bold" Padding="20,5">Недостатки:</TextBlock>
            <TextBlock Padding="10,0">- возможность потери данных вследствие возникновения физических поломок оборудования;</TextBlock>
            <TextBlock Padding="10,0">- отсутствие возможности совместной разработки.</TextBlock>
            <Label>Централизованные системы контроля версий</Label>
            <TextBlock Text="       Централизованные  системы контроля версий предполагают сохранение версий проектов на  общий сервер, с которого потом получают нужные версии клиенты."></TextBlock>
            <Image Source="/Diplom;component/Resources/5_2.jpg" Width="447"></Image>
            <TextBlock FontStyle="Oblique" FontWeight="Bold" Padding="20,5">Достоинства:</TextBlock>
            <TextBlock Padding="10,0">- возможность восстановления данных  из определенной версии (точно определяется по времени записи);</TextBlock>
            <TextBlock Padding="10,0">- возможность ведения командной разработки проекта;</TextBlock>
            <TextBlock FontStyle="Oblique" FontWeight="Bold" Padding="20,5">Недостатки:</TextBlock>
            <TextBlock Padding="10,0">- отсутствие доступа к данным при сбое работы сервера;</TextBlock>
            <TextBlock Padding="10,0">- довольно низкая скорость работы (из-за возникновения сетевых задержек).</TextBlock>
            <Label>Децентрализованные системы контроля версий</Label>
            <TextBlock Text="       В децентрализованных системах контроля версий при каждом копировании удалённого репозитория (расположенного на сервере) происходит полное копирование данных в локальный репозиторий (установленный на рабочем компьютере). Каждая копия содержит все данные, хранящиеся в удалённом репозитории. В случае, возникновения технической неисправности на стороне сервера, удаленный репозиторий можно перезаписать с любой сохраненной копии."></TextBlock>
            <Image Source="/Diplom;component/Resources/5_3.jpg" ></Image>
            <TextBlock FontStyle="Oblique" FontWeight="Bold" Padding="20,5">Достоинства:</TextBlock>
            <TextBlock Padding="10,0">- возможность восстановления данных  из определенной версии (точно определяется по времени записи);</TextBlock>
            <TextBlock Padding="10,0">- возможность ведения командной разработки проекта;</TextBlock>
            <TextBlock Padding="10,0">- при сбое работы сервера система сохраняет данные в локальном репозитории, что позволяет эффективно вести процесс разработки, а после восстановления работы сервера, передать все изменения в удаленный репозиторий;</TextBlock>
            <TextBlock Padding="10,0">- при физической поломке сервера данные можно легко перенести в новый удалённый репозиторий с любого локального репозитория;</TextBlock>
            <TextBlock Padding="10,0">- высокая скорость работы (в ходе работы данные записываются и получаются из локального репозитория, поэтому сетевые задержки отсутствуют).</TextBlock>
            <Label>Современные системы контроля версий</Label>
            <TextBlock Text="       Существует много систем контроля версий (Git, Darcs, Mercurial, Bazaar, Monotone и т.д), сходных по принципу работы и конечным задачам. Отличаются они друг от друга архитектурой, использованными решениями и удобством работы. Самая популярная на сегодняшний день система контроля версий – Git."></TextBlock>
            <Image Source="/Diplom;component/Resources/5_4.jpg" Height="209"></Image>
            <Label>Git</Label>
            <TextBlock Text="       Умение работать с git'ом — обязательный навык для программиста любого профиля. Можно долго обсуждать преимущества и недостатки разных систем контроля версий, но большинство компаний используют git, поэтому уметь работать с  git'ом нужно всем."></TextBlock>
            <TextBlock Text="       Git – распределённая система контроля версий. Что даёт ей все преимущества децентрализованной СКВ:"></TextBlock>
            <TextBlock Padding="10,0">- высокую скорость проведения всех операций (за счет отсутствия сетевой задержки);</TextBlock>
            <TextBlock Padding="10,0">- идеальные условия для командной разработки;</TextBlock>
            <TextBlock Padding="10,0">- страховку от потери информации при возникновении проблем с центральным сервером.</TextBlock>
            <TextBlock Text="       Для контроля версий в git используются 2 репозитория: локальный и удаленный. Локальный репозиторий (полноценный репозиторий, а не ссылки или копии отдельных ветвей) находится на компьютере разработчика, а удаленный на удалённом сервере. Доступ к удаленному репозиторию обеспечивается  благодаря гит-хостингу Github, Google Code, GitLab и т.д."></TextBlock>
            <Label>Как работает git</Label>
            <TextBlock Text="       Взаимодействие с удаленным репозиторием происходит при наличии интернета и, по сути, представляет собой синхронизацию двух репозиториев."></TextBlock>
            <TextBlock Text="       Команда push копирует новые данные, содержащиеся в локальном репозитории, в удалённый репозиторий, а команда pull передает данные из удаленного репозитория в локальный."></TextBlock>
            <TextBlock Text="       Каждая версия документа, внесенные обновления и т.д записываются в локальный репозиторий."></TextBlock>
            <Label>Дерево проекта</Label>
            <Image Source="/Diplom;component/Resources/5_5.jpg"></Image>
            <TextBlock Text="       В репозитории содержится «дерево» проекта, то есть все сохраненные версии файлов. Дерево может быть прямым (в этом случае каждое последующее сохранение файлов производилось после предыдущего без возвращения к более ранним версиям) и разветвленным."></TextBlock>
            <TextBlock Text="       К появлению «веток» приводит работа с более ранними версиями и сохранение внесённых изменений. На различных ветках дерева  содержатся сохранения, основой которых был один исходный файл. В ходе работы в файлы на разных ветках были внесены разные изменения. В системе управления версиями можно работать со всеми ветками дерева проекта, пошагово, изменяя и дополняя содержащиеся в них данные. После проведения ряда изменений 2 ветки могут «срастись», в новой версии файла будут учтены все внесенные изменения."></TextBlock>
        </StackPanel>
    </ScrollViewer>
</Page>
